
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.7.0.0
//   File : devices_types.cpp
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#include "devices_reflection.h"
#include <bond/core/exception.h>

namespace microsoft
{
namespace azure
{
namespace devices
{
    
    const ::bond::Metadata Handle::Schema::metadata
        = Handle::Schema::GetMetadata();
    
    const ::bond::Metadata Handle::Schema::s_value_metadata
        = ::bond::reflection::MetadataInit("value");

    
    const ::bond::Metadata Ptr::Schema::metadata
        = Ptr::Schema::GetMetadata();
    
    const ::bond::Metadata Ptr::Schema::s_value_metadata
        = ::bond::reflection::MetadataInit("value");

    
    namespace _bond_enumerators
    {
    namespace TransportProvider
    {
        const
        std::map<std::string, enum TransportProvider> _name_to_value_TransportProvider =
            boost::assign::map_list_of<std::string, enum TransportProvider>
                ("Http", Http)
                ("Mqtt", Mqtt)
                ("Amqp", Amqp);

        const
        std::map<enum TransportProvider, std::string> _value_to_name_TransportProvider =
            ::bond::reverse_map(_name_to_value_TransportProvider);

        const std::string& ToString(enum TransportProvider value)
        {
            std::map<enum TransportProvider, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                ::bond::InvalidEnumValueException(value, "TransportProvider");

            return it->second;
        }

        void FromString(const std::string& name, enum TransportProvider& value)
        {
            if (!ToEnum(value, name))
                ::bond::InvalidEnumValueException(name.c_str(), "TransportProvider");
        }
    } // namespace TransportProvider
    } // namespace _bond_enumerators

    
    const ::bond::Metadata CreateTransportArgs::Schema::metadata
        = CreateTransportArgs::Schema::GetMetadata();
    
    const ::bond::Metadata CreateTransportArgs::Schema::s_provider_metadata
        = ::bond::reflection::MetadataInit(::microsoft::azure::devices::_bond_enumerators::TransportProvider::Amqp, "provider");
    
    const ::bond::Metadata CreateTransportArgs::Schema::s_iotHubName_metadata
        = ::bond::reflection::MetadataInit("iotHubName");
    
    const ::bond::Metadata CreateTransportArgs::Schema::s_iotHubSuffix_metadata
        = ::bond::reflection::MetadataInit("iotHubSuffix");

    
    namespace _bond_enumerators
    {
    namespace ClientResultValue
    {
        const
        std::map<std::string, enum ClientResultValue> _name_to_value_ClientResultValue =
            boost::assign::map_list_of<std::string, enum ClientResultValue>
                ("Ok", Ok)
                ("InvalidArg", InvalidArg)
                ("Error", Error)
                ("InvalidSize", InvalidSize)
                ("IndefiniteTime", IndefiniteTime);

        const
        std::map<enum ClientResultValue, std::string> _value_to_name_ClientResultValue =
            ::bond::reverse_map(_name_to_value_ClientResultValue);

        const std::string& ToString(enum ClientResultValue value)
        {
            std::map<enum ClientResultValue, std::string>::const_iterator it =
                GetValueToNameMap(value).find(value);

            if (GetValueToNameMap(value).end() == it)
                ::bond::InvalidEnumValueException(value, "ClientResultValue");

            return it->second;
        }

        void FromString(const std::string& name, enum ClientResultValue& value)
        {
            if (!ToEnum(value, name))
                ::bond::InvalidEnumValueException(name.c_str(), "ClientResultValue");
        }
    } // namespace ClientResultValue
    } // namespace _bond_enumerators

    
    const ::bond::Metadata ClientResult::Schema::metadata
        = ClientResult::Schema::GetMetadata();
    
    const ::bond::Metadata ClientResult::Schema::s_value_metadata
        = ::bond::reflection::MetadataInit(::microsoft::azure::devices::_bond_enumerators::ClientResultValue::Ok, "value");

    
    const ::bond::Metadata ClientConfig::Schema::metadata
        = ClientConfig::Schema::GetMetadata();
    
    const ::bond::Metadata ClientConfig::Schema::s_transport_metadata
        = ::bond::reflection::MetadataInit(::microsoft::azure::devices::_bond_enumerators::TransportProvider::Amqp, "transport");
    
    const ::bond::Metadata ClientConfig::Schema::s_deviceId_metadata
        = ::bond::reflection::MetadataInit("deviceId");
    
    const ::bond::Metadata ClientConfig::Schema::s_deviceKey_metadata
        = ::bond::reflection::MetadataInit("deviceKey");
    
    const ::bond::Metadata ClientConfig::Schema::s_deviceSasToken_metadata
        = ::bond::reflection::MetadataInit("deviceSasToken");
    
    const ::bond::Metadata ClientConfig::Schema::s_iotHubName_metadata
        = ::bond::reflection::MetadataInit("iotHubName");
    
    const ::bond::Metadata ClientConfig::Schema::s_iotHubSuffix_metadata
        = ::bond::reflection::MetadataInit("iotHubSuffix");
    
    const ::bond::Metadata ClientConfig::Schema::s_protocolGatewayHostName_metadata
        = ::bond::reflection::MetadataInit("protocolGatewayHostName");

    
    const ::bond::Metadata CreateWithTransportArgs::Schema::metadata
        = CreateWithTransportArgs::Schema::GetMetadata();
    
    const ::bond::Metadata CreateWithTransportArgs::Schema::s_transport_metadata
        = ::bond::reflection::MetadataInit("transport");
    
    const ::bond::Metadata CreateWithTransportArgs::Schema::s_config_metadata
        = ::bond::reflection::MetadataInit("config");

    
    const ::bond::Metadata SendEventArgs::Schema::metadata
        = SendEventArgs::Schema::GetMetadata();
    
    const ::bond::Metadata SendEventArgs::Schema::s_client_metadata
        = ::bond::reflection::MetadataInit("client");
    
    const ::bond::Metadata SendEventArgs::Schema::s_event_metadata
        = ::bond::reflection::MetadataInit("event");
    
    const ::bond::Metadata SendEventArgs::Schema::s_callback_metadata
        = ::bond::reflection::MetadataInit("callback");
    
    const ::bond::Metadata SendEventArgs::Schema::s_context_metadata
        = ::bond::reflection::MetadataInit("context");

    
    const ::bond::Metadata SetMessageCallbackArgs::Schema::metadata
        = SetMessageCallbackArgs::Schema::GetMetadata();
    
    const ::bond::Metadata SetMessageCallbackArgs::Schema::s_client_metadata
        = ::bond::reflection::MetadataInit("client");
    
    const ::bond::Metadata SetMessageCallbackArgs::Schema::s_callback_metadata
        = ::bond::reflection::MetadataInit("callback");
    
    const ::bond::Metadata SetMessageCallbackArgs::Schema::s_context_metadata
        = ::bond::reflection::MetadataInit("context");

    
} // namespace devices
} // namespace azure
} // namespace microsoft
